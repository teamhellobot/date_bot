import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from loguru import logger
from dotenv import load_dotenv
from peewee import fn
import asyncio

from database.models import Idea, User
from database.utils import initialize_db, populate_db

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

idea_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ")],
        [KeyboardButton(text="üåü –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞")],
    ],
    resize_keyboard=True,
)


def get_manager_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî @hellobotstudio üë©‚Äçüíª",
                    url="https://t.me/hellobotstudio    ",
                )
            ]
        ]
    )


async def get_random_idea():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    logger.info("Fetching random idea from the database...")
    idea = Idea.select().order_by(fn.Random()).first()
    if idea:
        logger.info(f"Random idea found: {idea.text}")
    else:
        logger.warning("No ideas available in the database.")
    return idea


@dp.message(lambda message: message.text == "üåü –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞")
async def send_ofer(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ –±–æ—Ç–æ–≤"""
    logger.info(f"User requested bot order: {message.from_user.id}")
    user, created = User.get_or_create(
        user_id=message.from_user.id,
        defaults={
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
        },
    )

    if created:
        logger.info(f"New user created: {user.user_id}")
    else:
        logger.info(f"Existing user interacted: {user.user_id}")

    welcome_text = (
        "üöÄ <b>P.S.</b> –ú—ã —Å–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –û—Ç –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è\n\n"
        "–•–æ—á–µ—à—å —Ç–∞–∫–æ–≥–æ –∂–µ –∫—Ä—É—Ç–æ–≥–æ –±–æ—Ç–∞?"
    )

    await message.reply(
        welcome_text, reply_markup=get_manager_keyboard(), parse_mode="HTML"
    )
    logger.info(f"Bot order information sent to user: {user.user_id}")


@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"User started the bot: {message.from_user.id}")
    user, created = User.get_or_create(
        user_id=message.from_user.id,
        defaults={
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
        },
    )

    if created:
        logger.info(f"New user created: {user.user_id}")
    else:
        logger.info(f"Existing user interacted: {user.user_id}")

    welcome_text = (
        "üåü *–ü—Ä–∏–≤–µ—Ç!* üåü\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π! üíñ\n"
        "–ó–Ω–∞—é <b>50+ —Å–ø–æ—Å–æ–±–æ–≤</b> –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å –Ω–µ –Ω–∞ –¥–∏–≤–∞–Ω–µ "
        "–∏ –±–µ–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –≤ —Å—Ç–∏–ª–µ ¬´–ö—É–¥–∞ –ø–æ–µ–¥–µ–º? ‚Äî –ù–µ –∑–Ω–∞—é, –∞ —Ç—ã?¬ª üòè\n\n"
        "‚ú® *–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –∏ —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–µ–¥–ª–æ–∂—É:\n"
        "‚ñ´Ô∏è –ö—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∏–¥–µ—é –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è\n"
        "‚ñ´Ô∏è –°–ª—É—á–∞–π–Ω—É—é –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "‚ñ´Ô∏è –í—Å—ë –≤ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–º –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ‚Äî *–±–µ–∑ –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞*! ‚ù§Ô∏è\n\n"
        "---\n"
        "üöÄ <b>P.S.</b> –ú—ã —Å–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n"
    )

    await message.reply(welcome_text, reply_markup=idea_keyboard, parse_mode="HTML")

    await message.answer(
        "–ù—É–∂–µ–Ω —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç? "
        "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?" 
        "–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º?. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=get_manager_keyboard(),
    )

    logger.info(f"Welcome message sent to user: {user.user_id}")


@dp.message(lambda message: message.text == "üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ")
async def send_idea(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∏–¥–µ–∏ —Å–≤–∏–¥–∞–Ω–∏—è"""
    logger.info(f"User requested random date idea: {message.from_user.id}")
    try:
        await message.reply("üé≤ –í—ã–±–∏—Ä–∞–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ...")

        await asyncio.sleep(2)

        idea = await get_random_idea()
        if not idea:
            logger.warning("No ideas available to send.")
            await message.reply("–ò–¥–µ–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢", reply_markup=idea_keyboard)
            return

        response = f"‚ú® –ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è ‚ú®\n\n{idea.text}\n\n–•–æ—Ä–æ—à–µ–≥–æ –≤—Ä–µ–º—è –ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è! ‚ù§Ô∏è"

        if idea.image_path and os.path.exists(idea.image_path):
            logger.info(f"Sending idea with image: {idea.text}")
            with open(idea.image_path, "rb") as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=types.BufferedInputFile(photo.read(), filename="idea.jpg"),
                    caption=response,
                    reply_markup=idea_keyboard,
                )
        else:
            logger.info(f"Sending idea without image: {idea.text}")
            await message.reply(response, reply_markup=idea_keyboard)

    except Exception as e:
        logger.error(f"Unexpected error while sending idea: {type(e).__name__} - {e}")
        await message.reply(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=idea_keyboard
        )


async def main():
    logger.add("bot.log", rotation="10 MB", level="INFO")
    logger.info("Starting bot...")
    initialize_db()
    populate_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())